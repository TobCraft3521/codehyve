generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String @id @default(cuid())
  userId      String @unique
  name        String @default("User")
  userName    String @default("Username")
  email       String @default("")
  description String @default("")
  avatarUrl   String @default("")

  organizations Organization[] @relation("ProfileOrganization")
  teamId        String?
  teams         Team[]         @relation("ProfileTeams")

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  TeamMember TeamMember[]

  @@index([userId])
}

model Organization {
  id          String @id @default(cuid())
  name        String
  description String @default("")
  iconUrl     String @default("")
  adminUserId String

  profiles Profile[] @relation("ProfileOrganization")
  members  Member[]
  Team     Team[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([adminUserId])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  members        Profile[]    @relation("ProfileTeams")
  profileId      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  TeamMember     TeamMember[]

  @@index([organizationId])
}

enum OrgRole {
  ADMIN
  COADMIN
  MEMBER
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  role           OrgRole      @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@unique([organizationId, userId])
}

model Invitation {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  token          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

enum TeamRole {
  TEAMLEAD
  COLEAD
  MEMBER
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

model NotificationSubscription {
  id           String @id @default(cuid())
  subscription String @unique

  @@index([subscription])
  @@index([id])
}
